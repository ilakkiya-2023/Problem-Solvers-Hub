{"ast":null,"code":"// import \"./App.css\";\n// import Header from \"./components/Header\";\n// import Auth from \"./components/Auth\";\n// import Blogs from \"./components/Blogs\";\n// import UserBlogs from \"./components/UserBlogs\";\n// import BlogDetail from \"./components/BlogDetail\";\n// import AddBlog from \"./components/AddBlog\";\n// import React, { useEffect } from \"react\";\n// import { Route, Routes } from \"react-router-dom\";\n// import { useDispatch, useSelector } from \"react-redux\";\n// import { authActions } from \"./store\";\n// function App() {\n//   const dispatch = useDispatch();\n//   const isLoggedIn = useSelector((state) => state.isLoggedIn);\n//   useEffect(() => {\n//     if (localStorage.getItem(\"userId\")) {\n//       dispatch(authActions.signin());\n//     }\n//   }, [dispatch]);\n//   return (\n//     <React.Fragment>\n//       <Header />\n//       <main>\n//         <Routes>\n//           {!isLoggedIn ? (\n//             <>\n//               <Route path=\"/auth\" element={<Auth />} />\n//               <Route path=\"/\" element={<Blogs />} />\n//             </>\n//           ) : (\n//             <>\n//               <Route path=\"/\" element={<Blogs />} />\n//               <Route path=\"/blogs/add\" element={<AddBlog />} />\n//               <Route path=\"/myBlogs\" element={<UserBlogs />} />\n//               <Route path=\"/myBlogs/:id\" element={<BlogDetail />} />\n//               <Route path=\"/blogs/:id\" element={<BlogDetail />} /> {/* New Route for Blog Detail */}\n//             </>\n//           )}\n//         </Routes>\n//       </main>\n//     </React.Fragment>\n//   );\n// }\n// export default App;\n// import \"./App.css\";\n// import Header from \"./components/Header\";\n// import Auth from \"./components/Auth\";\n// import Blogs from \"./components/Blogs\";\n// import UserBlogs from \"./components/UserBlogs\";\n// import BlogDetail from \"./components/BlogDetail\";\n// import AddBlog from \"./components/AddBlog\";\n// import React, { useEffect } from \"react\";\n// import { Route, Routes } from \"react-router-dom\";\n// import { useDispatch, useSelector } from \"react-redux\";\n// import { authActions } from \"./store\";\n// function App() {\n//   const dispatch = useDispatch();\n//   const isLoggedIn = useSelector((state) => state.isLoggedIn);\n//   useEffect(() => {\n//     if (localStorage.getItem(\"userId\")) {\n//       dispatch(authActions.signin());\n//     }\n//   }, [dispatch]);\n//   return (\n//     <React.Fragment>\n//       <Header />\n//       <main>\n//         <Routes>\n//           {!isLoggedIn ? (\n//             <>\n//               <Route path=\"/auth\" element={<Auth />} />\n//               <Route path=\"/\" element={<Blogs />} />\n//               <Route path=\"/blogs/:id\" element={<BlogDetail />} />\n//             </>\n//           ) : (\n//             <>\n//               <Route path=\"/\" element={<Blogs />} />\n//               <Route path=\"/blogs/add\" element={<AddBlog />} />\n//               <Route path=\"/myBlogs\" element={<UserBlogs />} />\n//               <Route path=\"/myBlogs/:id\" element={<BlogDetail />} />\n//               <Route path=\"/blogs/:id\" element={<BlogDetail />} />\n//             </>\n//           )}\n//         </Routes>\n//       </main>\n//     </React.Fragment>\n//   );\n// }\n// export default App;\nimport express from \"express\";\nimport mongoose from \"mongoose\";\nimport blogRouter from \"./routes/blog-routes.js\";\nimport userRouter from \"./routes/user-routes.js\";\nconst app = express();\napp.use(express.json());\napp.use(\"/api/blog\", blogRouter); // This line must match the client-side URL\n\napp.use(\"/api/user\", userRouter);\nmongoose.connect(\"your-mongodb-connection-string\", {\n  useNewUrlParser: true,\n  useUnifiedTopology: true\n}).then(() => {\n  app.listen(3000, () => {\n    console.log(\"Server is running on port 3000\");\n  });\n}).catch(err => {\n  console.error(\"Database connection error:\", err);\n});","map":{"version":3,"names":["express","mongoose","blogRouter","userRouter","app","use","json","connect","useNewUrlParser","useUnifiedTopology","then","listen","console","log","catch","err","error"],"sources":["E:/FSD-FINAL-PROJECT/Blog-App/client/src/App.js"],"sourcesContent":["// import \"./App.css\";\r\n// import Header from \"./components/Header\";\r\n// import Auth from \"./components/Auth\";\r\n// import Blogs from \"./components/Blogs\";\r\n// import UserBlogs from \"./components/UserBlogs\";\r\n// import BlogDetail from \"./components/BlogDetail\";\r\n// import AddBlog from \"./components/AddBlog\";\r\n// import React, { useEffect } from \"react\";\r\n// import { Route, Routes } from \"react-router-dom\";\r\n// import { useDispatch, useSelector } from \"react-redux\";\r\n// import { authActions } from \"./store\";\r\n\r\n// function App() {\r\n//   const dispatch = useDispatch();\r\n//   const isLoggedIn = useSelector((state) => state.isLoggedIn);\r\n//   useEffect(() => {\r\n//     if (localStorage.getItem(\"userId\")) {\r\n//       dispatch(authActions.signin());\r\n//     }\r\n//   }, [dispatch]);\r\n\r\n//   return (\r\n//     <React.Fragment>\r\n//       <Header />\r\n//       <main>\r\n//         <Routes>\r\n//           {!isLoggedIn ? (\r\n//             <>\r\n//               <Route path=\"/auth\" element={<Auth />} />\r\n//               <Route path=\"/\" element={<Blogs />} />\r\n//             </>\r\n//           ) : (\r\n//             <>\r\n//               <Route path=\"/\" element={<Blogs />} />\r\n//               <Route path=\"/blogs/add\" element={<AddBlog />} />\r\n//               <Route path=\"/myBlogs\" element={<UserBlogs />} />\r\n//               <Route path=\"/myBlogs/:id\" element={<BlogDetail />} />\r\n//               <Route path=\"/blogs/:id\" element={<BlogDetail />} /> {/* New Route for Blog Detail */}\r\n//             </>\r\n//           )}\r\n//         </Routes>\r\n//       </main>\r\n//     </React.Fragment>\r\n//   );\r\n// }\r\n\r\n// export default App;\r\n\r\n\r\n// import \"./App.css\";\r\n// import Header from \"./components/Header\";\r\n// import Auth from \"./components/Auth\";\r\n// import Blogs from \"./components/Blogs\";\r\n// import UserBlogs from \"./components/UserBlogs\";\r\n// import BlogDetail from \"./components/BlogDetail\";\r\n// import AddBlog from \"./components/AddBlog\";\r\n// import React, { useEffect } from \"react\";\r\n// import { Route, Routes } from \"react-router-dom\";\r\n// import { useDispatch, useSelector } from \"react-redux\";\r\n// import { authActions } from \"./store\";\r\n\r\n// function App() {\r\n//   const dispatch = useDispatch();\r\n//   const isLoggedIn = useSelector((state) => state.isLoggedIn);\r\n\r\n//   useEffect(() => {\r\n//     if (localStorage.getItem(\"userId\")) {\r\n//       dispatch(authActions.signin());\r\n//     }\r\n//   }, [dispatch]);\r\n\r\n//   return (\r\n//     <React.Fragment>\r\n//       <Header />\r\n//       <main>\r\n//         <Routes>\r\n//           {!isLoggedIn ? (\r\n//             <>\r\n//               <Route path=\"/auth\" element={<Auth />} />\r\n//               <Route path=\"/\" element={<Blogs />} />\r\n//               <Route path=\"/blogs/:id\" element={<BlogDetail />} />\r\n//             </>\r\n//           ) : (\r\n//             <>\r\n//               <Route path=\"/\" element={<Blogs />} />\r\n//               <Route path=\"/blogs/add\" element={<AddBlog />} />\r\n//               <Route path=\"/myBlogs\" element={<UserBlogs />} />\r\n//               <Route path=\"/myBlogs/:id\" element={<BlogDetail />} />\r\n//               <Route path=\"/blogs/:id\" element={<BlogDetail />} />\r\n//             </>\r\n//           )}\r\n//         </Routes>\r\n//       </main>\r\n//     </React.Fragment>\r\n//   );\r\n// }\r\n\r\n// export default App;\r\n\r\nimport express from \"express\";\r\nimport mongoose from \"mongoose\";\r\nimport blogRouter from \"./routes/blog-routes.js\";\r\nimport userRouter from \"./routes/user-routes.js\";\r\n\r\nconst app = express();\r\napp.use(express.json());\r\n\r\napp.use(\"/api/blog\", blogRouter);  // This line must match the client-side URL\r\napp.use(\"/api/user\", userRouter);\r\n\r\nmongoose\r\n  .connect(\"your-mongodb-connection-string\", {\r\n    useNewUrlParser: true,\r\n    useUnifiedTopology: true,\r\n  })\r\n  .then(() => {\r\n    app.listen(3000, () => {\r\n      console.log(\"Server is running on port 3000\");\r\n    });\r\n  })\r\n  .catch((err) => {\r\n    console.error(\"Database connection error:\", err);\r\n  });\r\n"],"mappings":"AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AAGA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AAEA,OAAOA,OAAP,MAAoB,SAApB;AACA,OAAOC,QAAP,MAAqB,UAArB;AACA,OAAOC,UAAP,MAAuB,yBAAvB;AACA,OAAOC,UAAP,MAAuB,yBAAvB;AAEA,MAAMC,GAAG,GAAGJ,OAAO,EAAnB;AACAI,GAAG,CAACC,GAAJ,CAAQL,OAAO,CAACM,IAAR,EAAR;AAEAF,GAAG,CAACC,GAAJ,CAAQ,WAAR,EAAqBH,UAArB,E,CAAmC;;AACnCE,GAAG,CAACC,GAAJ,CAAQ,WAAR,EAAqBF,UAArB;AAEAF,QAAQ,CACLM,OADH,CACW,gCADX,EAC6C;EACzCC,eAAe,EAAE,IADwB;EAEzCC,kBAAkB,EAAE;AAFqB,CAD7C,EAKGC,IALH,CAKQ,MAAM;EACVN,GAAG,CAACO,MAAJ,CAAW,IAAX,EAAiB,MAAM;IACrBC,OAAO,CAACC,GAAR,CAAY,gCAAZ;EACD,CAFD;AAGD,CATH,EAUGC,KAVH,CAUUC,GAAD,IAAS;EACdH,OAAO,CAACI,KAAR,CAAc,4BAAd,EAA4CD,GAA5C;AACD,CAZH"},"metadata":{},"sourceType":"module"}